<?xml version="1.0" encoding="UTF-8"?>

	<!-- 但修改了本文件时，可以60秒重新载入本xml文件 -->
	<configuration scan="true" scanPeriod="10 seconds" debug="false">
	<!-- 配置log文件的目录 -->
	<property resource="log4j.properties"/>
	<property name="LOG_PATH" value="${log.path}" />
	<property name="LOG_LEVEL" value="${log.level}" />
	<property name="LOG_ROOT_LEVEL" value="${log.root.level}" />

	<!--控制台输出-->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- encoder 默认配置为PatternLayoutEncoder -->
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 所有日志文件，root打到这里 -->
	<appender name="commonLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- commonlog固定打到这个目录中，文件名字固定，不往子目录中打 -->
			<fileNamePattern>${LOG_PATH}/common_%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 只保留最近30天的 -->
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<!-- 日志文件格式 -->
		<encoder>
			<!-- 业务分析log格式，所有业务分析使用的格式，都是这个格式，一般对应的logger都是warn或者error -->
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}]%-5level:%msg==>%logger.%method\(%file:%L\)[%t]%n</pattern>
			<charset>utf-8</charset>
		</encoder>
	</appender>
	
	<!-- 服务层代码日志记录 -->
	<appender name="serviceAppander" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- commonlog固定打到这个目录中，文件名字固定，不往子目录中打 -->
			<fileNamePattern>${LOG_PATH}/service/service_%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 只保留最近30天的 -->
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<!-- 日志文件格式 -->
		<encoder>
			<!-- 业务分析log格式，所有业务分析使用的格式，都是这个格式，一般对应的logger都是warn或者error -->
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}]%-5level:%msg==>%logger.%method\(%file:%L\)[%t]%n</pattern>
			<charset>utf-8</charset>
		</encoder>
	</appender>
	
	<!-- api代码日志记录 -->
	<appender name="apiAppander" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- commonlog固定打到这个目录中，文件名字固定，不往子目录中打 -->
			<fileNamePattern>${LOG_PATH}/api/api_%d{yyyy-MM-dd}.log</fileNamePattern>
			<!-- 只保留最近30天的 -->
			<maxHistory>30</maxHistory>
		</rollingPolicy>
		<!-- 日志文件格式 -->
		<encoder>
			<!-- 业务分析log格式，所有业务分析使用的格式，都是这个格式，一般对应的logger都是warn或者error -->
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}]%-5level:%msg==>%logger.%method\(%file:%L\)[%t]%n</pattern>
			<charset>utf-8</charset>
		</encoder>
	</appender>

	<!--perf4j配置-->
	<appender name="statistics" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志文件输出的文件名 -->
			<FileNamePattern>${LOG_PATH}/statistics/statistics.%d{yyyy-MM-dd}.log</FileNamePattern>
		</rollingPolicy>
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%msg%n</pattern>
		</layout>
	</appender>
	<!--AsyncCoalescingStatisticsAppender收集StopWatch的日志信息并传送到下游的文件appenders。-->
	<appender name="coalescingStatistics" class="org.perf4j.logback.AsyncCoalescingStatisticsAppender">
		<timeSlice>10000</timeSlice>
		<appender-ref ref="statistics"/>
	</appender>

	<logger name="org.perf4j.TimingLogger" level="info" additivity="false">
		<appender-ref ref="coalescingStatistics" />
	</logger>
	<!--perf4j配置结束-->
	
	<!-- 为每个包下的所有类指定，也可以指定到具体的类名称 -->
	<logger name="com.google.xiao.service" level="${LOG_LEVEL}" additivity="false">
		<appender-ref ref="serviceAppander" />
	</logger>
	
	<logger name="com.google.xiao.web" level="${LOG_LEVEL}" additivity="false">
		<appender-ref ref="apiAppander" />
	</logger>

	<root level="${LOG_ROOT_LEVEL}">
		<appender-ref ref="commonLogAppender" />
		<appender-ref ref="STDOUT" />
	</root>
</configuration>